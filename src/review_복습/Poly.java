package review_복습;

/*

다형성이 조금 복잡해서 정리 필요성 있음


다형성이란?
- 하나의 객체나 메소드가 여러가지 다른 형태를 가질 수 있는 것.
ex. 오버라이딩, 오버로딩, 상속받은 객체의 다형적 참조(형변환)

형변환(Casting)
 - 업캐스팅 : 자식 클래스 타입의 참조변수를 부모 클래스 타입으로 형변환(자동으로 됨)
 - 다운캐스팅 : 부모 클래스 타입의 참조변수를 자식 클래스 타입으로 형변환(형변환 타입을 명시해야함)


핵심
1. 부모 타입의 변수는 부모 인스턴스를 참조할 수 있다. -> Parent parent = new Parent(); -> Parent 인스턴스를 생성,할당하고(new Parent())
                                                                                Parent타입의 변수 parent에 해당 참조값을 넣는다.
2. 부모 변수가 자식 인스턴스를 참조할 수 있다. (다형적 참조)
ex. Parent poly = new Child();
메모리 상에는 부모와 자식이 둘 다 형성됨. 왜냐면, new Child()로 Child 인스턴스를 형성하면, 상속관계에 있는 부모도 같이 사용할 수 있기에,
부모 타입도 메모리에 형성하기 때문. 그리고 이 참조값을 Parent 타입 변수에 담는다. 즉, 부모는 자식을 담을 수 있다.
이렇게 되면, 메서드를 호출할 때, Parent 타입인 poly가 Child 인스턴스의 panretMethod()부터 실행한다.
반대로 Child poly = new Parent(); 를 하게 되면 컴파일 오류가 생긴다.
왜냐하면, Parent 인스턴스를 만들면 부모는 자식의 메모리를 만들지 않기 때문에, Parent만 형성된다. 하지만 poly는 Child 타입이므로,
자식타입의 변수는 부모를 참조할 수 없다.

하지만, 한계가 있다.
* 본인은 본인 타입만 호출할 수 있다는 한계다.
ex. Parent poly = new Child(); 를 하면, 메모리 형성은 자식과 부모 둘 다 되는거지만, 호출은 poly가 부모타입이기에,
parentmethod()만 호출할 수 있다. 상속관계에서 자식은 부모를 찾아서 올라갈 수 있지만, 부모는 자식을 찾아 내려갈 수 없기 때문이다.
그래서
<다운캐스팅>이 사용된다. 방법은 Child child = (Child) poly -> Parent 타입 poly를 Child 타입으로 다운캐스팅 후, 이를 Child 타입 child에 대입한다.
 그 중에서도 일시적 다운캐스팅이 메서드 호출 순간 사용된다.
ex.((Child) poly).childMethod(); -> 부모타입 poly를 일시적으로 Child로 다운캐스팅하여 childMethod()를 호출한다.



 */
